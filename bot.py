# bot.py (–í–µ—Ä—Å–∏—è 8.4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω show_instructions_callback)

import logging
import json
import uuid
import requests
import re
import asyncio
from functools import wraps
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

import config
from keyboards import get_main_menu_keyboard, get_server_list_keyboard, get_server_management_keyboard

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
USERS_FILE = "users.json"
ASK_SERVER_NAME, ASK_IP, CONFIRM_DELETE = range(3)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def escape_markdown(text: str) -> str:
    if not isinstance(text, str): text = str(text)
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def load_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f: return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError): return {}

def save_users(users_data):
    with open(USERS_FILE, 'w', encoding='utf-8') as f: json.dump(users_data, f, indent=4, ensure_ascii=False)

def is_valid_ip(ip: str) -> bool:
    parts = ip.split('.')
    if len(parts) != 4: return False
    try:
        return all(0 <= int(part) <= 255 for part in parts)
    except ValueError: return False

def server_registered(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = str(update.effective_user.id)
        if user_id not in load_users():
            await update.message.reply_text(r"‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å\.", parse_mode='MarkdownV2')
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

def get_status_text(data: dict, server_name: str) -> str:
    cpu = escape_markdown(data.get('cpu', 'N/A'))
    mem = data.get('memory', {})
    disk = data.get('disk', {})
    mem_text = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {escape_markdown(mem.get('used', 'N/A'))} / {escape_markdown(mem.get('total', 'N/A'))} –ì–ë \\({escape_markdown(mem.get('percent', 'N/A'))}%\\)"
    disk_text = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {escape_markdown(disk.get('used', 'N/A'))} / {escape_markdown(disk.get('total', 'N/A'))} –ì–ë \\({escape_markdown(disk.get('percent', 'N/A'))}%\\)"
    return (
        f"*üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ ¬´{escape_markdown(server_name)}¬ª*\n\n"
        f"üî• *–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:* {cpu}%\n"
        f"üß† *–ü–∞–º—è—Ç—å:* {mem_text}\n"
        f"üíæ *–î–∏—Å–∫:* {disk_text}"
    )

async def send_or_edit(update: Update, text: str, reply_markup=None):
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
    
    if update.message:
        await update.message.reply_text(r"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", reply_markup=get_main_menu_keyboard(), parse_mode='MarkdownV2')
    elif query:
        await query.edit_message_text(r"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", reply_markup=get_main_menu_keyboard(), parse_mode='MarkdownV2')

async def myservers_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    users = load_users()
    user_data = users.get(user_id, {"servers": {}})
    text = "üóÇÔ∏è *–í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π\."
    await query.edit_message_text(text, reply_markup=get_server_list_keyboard(user_data), parse_mode='MarkdownV2')

async def select_server_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    server_name = query.data.split('_', 2)[-1]
    user_id = str(query.from_user.id)
    users = load_users()
    server_data = users.get(user_id, {}).get("servers", {}).get(server_name)

    if not server_data:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω\.", parse_mode='MarkdownV2')
        return

    text = (
        f"‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º ¬´{escape_markdown(server_name)}¬ª*\n\n"
        f"**IP\-–∞–¥—Ä–µ—Å:** `{escape_markdown(server_data['server_ip'])}`\n"
        f"**–ö–ª—é—á:** `{escape_markdown(server_data['secret_key'])}`"
    )
    await query.edit_message_text(text, reply_markup=get_server_management_keyboard(server_name), parse_mode='MarkdownV2')

async def set_active_server_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    server_name = query.data.split('_', 2)[-1]
    user_id = str(query.from_user.id)
    
    users = load_users()
    if user_id in users and server_name in users[user_id].get("servers", {}):
        users[user_id]['active_server'] = server_name
        save_users(users)
        await query.edit_message_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä ¬´{escape_markdown(server_name)}¬ª –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–º\.", parse_mode='MarkdownV2')
        await start_command(update, context)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\.", parse_mode='MarkdownV2')

# --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
@server_registered
async def show_instructions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    query = update.callback_query
    await query.answer()
    server_name = query.data.split('_', 2)[-1]
    user_id = str(query.from_user.id)
    user_data = load_users()[user_id]
    secret_key = user_data["servers"][server_name]['secret_key']
    
    AGENT_URL = f"https://raw.githubusercontent.com/{context.bot_data.get('repo_owner', 'Leonid1095')}/{context.bot_data.get('repo_name', 'telegram-server-bot')}/main/install.sh"
    
    text = (
        f"üìã *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ¬´{escape_markdown(server_name)}¬ª*\n\n"
        f"1\\. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ \(–æ—Ç `root`\) –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É:\n"
        f"```bash\nwget -qO- {AGENT_URL} | bash -s -- --key {secret_key}\n```"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–∏—Ä–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await context.bot.send_message(chat_id=user_id, text=text, parse_mode='MarkdownV2')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å...")
    user_id = str(query.from_user.id)
    users = load_users()
    user_data = users.get(user_id)

    if not user_data or 'active_server' not in user_data:
        await query.edit_message_text("‚ùóÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é ¬´–ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã¬ª\.", reply_markup=get_main_menu_keyboard(), parse_mode='MarkdownV2')
        return

    active_server_name = user_data['active_server']
    server_info = user_data['servers'][active_server_name]
    server_ip, secret_key = server_info['server_ip'], server_info['secret_key']
    url = f"http://{server_ip}:5000/status"
    headers = {"X-Secret-Key": secret_key}
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(None, lambda: requests.get(url, headers=headers, timeout=10))
        response.raise_for_status()
        status_message = get_status_text(response.json(), active_server_name)
        await query.edit_message_text(status_message, reply_markup=get_main_menu_keyboard(), parse_mode='MarkdownV2')
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–≥–µ–Ω—Ç—É {server_ip} –¥–ª—è {user_id}: {e}")
        error_text = fr"‚õîÔ∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É* `{escape_markdown(active_server_name)}`\."
        await query.edit_message_text(error_text, reply_markup=get_main_menu_keyboard(), parse_mode='MarkdownV2')

# --- –î–∏–∞–ª–æ–≥–∏ ---

async def addserver_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(r"üìù –í–≤–µ–¥–∏—Ç–µ **–∏–º—è** –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ \(–Ω–∞–ø—Ä–∏–º–µ—Ä, `web-server-de`\)\. –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\.", parse_mode='MarkdownV2')
    return ASK_SERVER_NAME

async def ask_server_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['server_name'] = update.message.text.strip()
    await update.message.reply_text(r"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **IP\-–∞–¥—Ä–µ—Å** —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\.", parse_mode='MarkdownV2')
    return ASK_IP

async def ask_ip_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    server_ip = update.message.text.strip()
    server_name = context.user_data.get('server_name')

    if not is_valid_ip(server_ip):
        await update.message.reply_text(r"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP\-–∞–¥—Ä–µ—Å\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\.", parse_mode='MarkdownV2')
        return ASK_IP

    user_id = str(update.effective_user.id)
    users = load_users()
    user_servers = users.setdefault(user_id, {"servers": {}})["servers"]
    
    user_servers[server_name] = {"server_ip": server_ip, "secret_key": str(uuid.uuid4())}
    users[user_id]['active_server'] = server_name
    save_users(users)
    
    await update.message.reply_text(fr"‚úÖ –°–µ—Ä–≤–µ—Ä `{escape_markdown(server_name)}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–º\!", parse_mode='MarkdownV2')
    await start_command(update, context)
    return ConversationHandler.END

async def deleteserver_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    server_name = query.data.split('_', 2)[-1]
    context.user_data['server_to_delete'] = server_name
    await query.edit_message_text(fr"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä `{escape_markdown(server_name)}`\?", reply_markup=get_server_management_keyboard(server_name))
    return CONFIRM_DELETE

async def delete_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ get_server_management_keyboard –Ω–µ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–∞/–Ω–µ—Ç
    # –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, –Ω–æ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ select_server_callback
    pass

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await send_or_edit(update, r"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\.")
    await start_command(update, context)
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update:", exc_info=context.error)

async def post_init(application: Application):
    application.bot_data['repo_owner'] = 'Leonid1095'
    application.bot_data['repo_name'] = 'telegram-server-bot'
    logger.info("–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

def main():
    if not config.TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.py")
        return
    
    application = Application.builder().token(config.TELEGRAM_TOKEN).post_init(post_init).build()
    application.add_error_handler(error_handler)
    
    add_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(addserver_start, pattern='^add_server_start$')],
        states={
            ASK_SERVER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_server_name_handler)],
            ASK_IP: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_ip_handler)]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(start_command, pattern='^menu_back$'))
    application.add_handler(CallbackQueryHandler(status_command, pattern='^menu_status$'))
    application.add_handler(CallbackQueryHandler(myservers_menu, pattern='^menu_myservers$'))
    application.add_handler(CallbackQueryHandler(select_server_callback, pattern=r'^select_server_'))
    application.add_handler(CallbackQueryHandler(set_active_server_callback, pattern=r'^set_active_'))
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(show_instructions_callback, pattern=r'^show_instructions_'))
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ select_server_callback, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π ConversationHandler
    application.add_handler(CallbackQueryHandler(deleteserver_start, pattern=r'^delete_server_'))

    application.add_handler(add_conv)

    logger.info("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç (v8.4, –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
